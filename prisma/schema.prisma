generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @db.Uuid
  name        String?      // Make optional for onboarding
  email       String       @unique
  colorScheme String       @default("theme-blue")
  isPublic    Boolean      @default(true)
  program     String?      // Make optional for onboarding
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  enrollments Enrollment[]
  reviews     Review[]
}

model Course {
  id                       String   @id @db.Uuid
  code                     String   @unique
  name                     String
  credits                  Int
  scheduledHours           Int?
  selfStudyHours           Int?
  mainFieldOfStudy         String[]
  advanced                 Boolean
  semester                 Int[]
  period                   Int[]
  block                    Int[]
  campus                   String
  exclusions               String[]
  offeredFor               String[]
  prerequisites            String
  recommendedPrerequisites String
  learningOutcomes         String
  content                  String
  teachingMethods          String

  // Relations
  examinations Examination[]
  enrollments  Enrollment[]
  reviews      Review[]

  // Search optimization indexes
  @@index([code])                    // Fast lookup by course code
  @@index([name])                    // Fast search by name
  @@index([mainFieldOfStudy])        // Filter by field of study
  @@index([advanced])                // Filter basic vs advanced
  @@index([campus])                  // Filter by campus
  @@index([credits])                 // Sort by credits
  @@index([code, name])              // Compound index for search
}

model Examination {
  id           String  @id @db.Uuid
  courseId     String  @db.Uuid      // ✅ This should be UUID!
  code         String
  name         String
  credits      Int
  gradingScale String
  
  // Relations
  course       Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@index([courseId])  // Fast lookup of exams by course
}

model Enrollment {
  id       String @id @db.Uuid
  semester Int
  userId   String @db.Uuid          // ✅ This should be UUID!
  courseId String @db.Uuid          // ✅ This should be UUID!
  
  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Prevent duplicate enrollments
  @@unique([userId, courseId, semester])
  @@index([userId])    // Fast lookup of user's enrollments
  @@index([courseId])  // Fast lookup of course enrollments
}

model Review {
  id        String   @id @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid        // ✅ This should be UUID!
  courseId  String   @db.Uuid        // ✅ This should be UUID!
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // One review per user per course
  @@unique([userId, courseId])
  @@index([courseId])          // Fast lookup of course reviews
  @@index([rating])            // Sort by rating
  @@index([createdAt])         // Sort by newest
}