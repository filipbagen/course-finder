generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @db.Uuid
  name        String?
  email       String       @unique
  colorScheme String       @default("theme-blue")
  isPublic    Boolean      @default(true)
  program     String?
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  reviews     Review[]
}

model Enrollment {
  id       String @id @db.Uuid
  semester Int
  userId   String @db.Uuid
  courseId String @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, semester])
  @@index([userId])
  @@index([courseId])
}

model Review {
  id        String   @id @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  courseId  String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
  @@index([createdAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model course {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                     String   @unique
  name                     String
  credits                  BigInt
  campus                   String
  mainFieldOfStudy         String[]
  advanced                 Boolean
  courseType               String?
  examiner                 String?
  exclusions               String[]
  scheduledHours           BigInt?
  selfStudyHours           BigInt?
  period                   BigInt[]
  block                    BigInt[]
  learningOutcomes         Json?
  content                  Json?
  teachingMethods          Json?
  prerequisites            Json?
  recommendedPrerequisites Json?
  offeredFor               String[]
  examination              Json[]
  programInfo              Json[]
  semester                 BigInt
}
