generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model enrollment {
  id       String @id @db.Uuid
  semester Int
  userId   String @db.Uuid
  courseId String @db.Uuid
  course   course @relation("enrollmentToCourse", fields: [courseId], references: [id], onDelete: Cascade)
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, semester])
  @@index([courseId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  id          String       @id @db.Uuid
  name        String
  email       String       @unique
  colorScheme String       @default("theme-blue")
  isPublic    Boolean      @default(true)
  program     String?
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  enrollment  enrollment[]
  review      review[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model course {
  id                       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                     String       @unique
  name                     String
  credits                  BigInt
  campus                   String
  mainFieldOfStudy         String[]
  advanced                 Boolean
  courseType               String?
  examiner                 String?
  exclusions               String[]
  scheduledHours           BigInt
  selfStudyHours           BigInt
  period                   BigInt[]
  block                    BigInt[]
  learningOutcomes         Json
  content                  Json
  teachingMethods          Json
  prerequisites            Json
  recommendedPrerequisites Json
  offeredFor               String[]
  examination              Json[]
  programInfo              Json[]
  semester                 BigInt[]
  enrollment               enrollment[] @relation("enrollmentToCourse")
  review                   review[]

  // Performance indexes for search and filtering
  @@index([name], map: "course_name_idx")
  @@index([code], map: "course_code_idx")
  @@index([campus], map: "course_campus_idx")
  @@index([advanced], map: "course_advanced_idx")
  @@index([mainFieldOfStudy], map: "course_mainFieldOfStudy_idx")
  @@index([semester], map: "course_semester_idx")
  @@index([period], map: "course_period_idx")
  @@index([block], map: "course_block_idx")
}

model review {
  id        String   @id(map: "Review_pkey") @db.Uuid
  rating    Float    @db.Real
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String   @db.Uuid
  courseId  String   @db.Uuid
  course    course   @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "Review_courseId_fkey")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Review_userId_fkey")

  @@unique([userId, courseId], map: "Review_userId_courseId_key")
  @@index([courseId], map: "Review_courseId_idx")
  @@index([createdAt], map: "Review_createdAt_idx")
  @@index([rating], map: "Review_rating_idx")
}
